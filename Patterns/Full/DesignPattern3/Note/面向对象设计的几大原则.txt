1.单一职责原则:就一个类而言,应该仅有一个引起他变化的原因
比方说:在做一个项目中,分别有两个版本,一个是window一个是安卓版本，前期开发项目的时候如果按照之前的程序是开发,那我们在做安卓的时候我们就需要把之前我们的代码再次粘贴过来,但是实际上，在这段过程中我们的有写逻辑性的代码是没有发生改变的，改变的只是客服端的程序。这样我们就发现如果一个类承担的责任过多，就等于吧这些责任耦合在一起,一个职责的变化可能会削弱或者抑制这个类完成其他责任的能力.这种耦合会导致脆弱的设计。当变化发生时，设计会遭到意想不到的破坏。【事实上，我们完全可以将界面和逻辑进行分离】


2.开放-封闭原则:软件实体应该可以拓展,但不是修改
开放封闭原则是面向对象设计的核心所在,遵循这个原则可以带来面向对象技术所声称的巨大好处，也就是可维护,可扩展，可复用，灵活性好。开发人员应该在仅对程序中呈现出频繁变化的那些部分做出抽象,然而,对于应用程序中的每个部分都刻意地进行抽象同样不是一个好的注意，拒绝不成熟的抽象和抽象本身一样重要。


3.依赖倒置原则:就是要针对接口编程,不要对实现编程
依赖倒置原则比方说我们将一些访问数据库的专门封装dbhelper高层的模块调用dbhlper(底层模块)但是我们那天如果我们需要重复的使用高层模块，而我们又需要用其他的数据库，这样我们就没有办法了,所以我们应该是将高层模块与底层模块都抽象，定义接口，这样我们就不会发生这样的问题。抽象不应该依赖细节，细节应该依赖抽象
1.高层模块不应该依赖底层模块,两个都应该依赖抽象
2.抽象的不应该依赖细节,细节应该依赖抽象